

sudo sysctl -w net.ipv4.ip_forward=1

nano /etc/sysctl.conf


sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release wget curl bash-completion net-tools



sudo ln -s /var/lib/snapd/snap /snap

sudo systemctl enable --now snapd.socket




curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.tgz
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.tgz.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Windows-x86_64.exe
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Windows-x86_64.exe.sha256

# https://github.com/docker/compose/releases/download/1.29.1/run.sh
# https://github.com/docker/compose/archive/refs/tags/1.29.1.zip
# https://github.com/docker/compose/archive/refs/tags/1.29.1.tar.gz

wget "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64"

sudo cp -f ./docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
rm -rf ./docker-compose-Linux-x86_64
sudo chmod +x /usr/local/bin/docker-compose

sudo docker ps
sudo docker exec -i -t 6ee6223a3ce3 bash


sudo groupadd docker
sudo usermod -aG docker mikl






Portainer to 1.24

sudo docker volume create portainer_data

sudo docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

sudo docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce



Portainer to 2.0.0

mkdir -p portainer-data && cd portainer-data
nano docker-compose.yml

version: '3'
  service:
    portainer:
      image: portainer/portainer-ce
      container_name: portainer-panel
      restart: always
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - portainer_data:/data
      ports:
        - 9000:9000
        - 8000:8000
      # networks:
      #  - portainer_net

volumes:
  portainer_data:

# networks:
#  portainer_net:
#    driver: bridge



openssl rand -base64 48
If3VUCE75QBEbbhervInaHvfJcPC5/g3k4C5gli1hU6BTZfp3mOKTTOEjqhegl1l



https://download.nextcloud.com/server/releases/nextcloud-21.0.0.zip



Create a docker-compose.yml file similar to this:

version: '3'
services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    environment:
      DB_MYSQL_HOST: "db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
  db:
    image: 'jc21/mariadb-aria:latest'
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ./data/mysql:/var/lib/mysql


docker-compose up -d

http://127.0.0.1:81

Default Admin User:

Email:    admin@example.com
Password: changeme

Upgrading to new versions
docker-compose pull
docker-compose up -d








version: "2"

services:

  bitwardenrs:
    image: bitwardenrs/server:latest
    container_name: bitwardenrs
    volumes:
      - BitWardenRS:/data/
    ports:
      - 8100:80
    restart: unless-stopped




mkdir searx && cd searx
nano docker-compose.yml

version: '2.3'

services:
  searx:
    container_name: searx
    image: angristan/searx:latest
    restart: always
    ports:
      - "8585:8888"
    environment:
      - IMAGE_PROXY=true
      - BASE_URL=http://192.168.0.120:8585
      - UID=1000
      - GID=1000
      




mkdir -p ./heimdall/config && cd ./heimdall
nano docker-compose.yml


---
version: "2.1"
services:
  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Moscow
    volumes:
      - ./config:/config
    ports:
      - 8787:80
    restart: unless-stopped


sudo docker-compose up -d



cp ./config/nginx/site-confs/default ./ng-site-default
    volumes:
      - ./ssl/:/etc/openssl/
      - ./ng-site-default:/config/nginx/site-confs/default


nginx.conf - to primer:

server {
    listen 80;
    server_name docr.smmhub.ru;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl;
    server_name docr.smmhub.ru;
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/docr.smmhub.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/docr.smmhub.ru/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # ssl_certificate /etc/openssl/domain.crt;
	# ssl_certificate_key /etc/openssl/domain.key;
    # ssl_dhparam /etc/openssl/dhparam.pem;
    
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }
}


openssl genrsa -out rootCA.key 2048
openssl req -x509 -new -key rootCA.key -days 10000 -out rootCA.crt
openssl genrsa -out domain.key 2048
openssl req -new -key domain.key -out domain.req
openssl x509 -req -in domain.req -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out domain.crt -days 5000
rm -rf domain.req
cat rootCA.crt domain.crt > server.crt

openssl rsa -in domain.key -out domain.nopass.key
openssl dhparam -out dhparam.pem 2048

wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
sudo cp mkcert-v1.4.3-linux-amd64 /usr/local/bin/mkcert
rm -rf mkcert-v1.4.3-linux-amd64
sudo chmod +x /usr/local/bin/mkcert
mkcert -key-file key.pem -cert-file cert.pem -p12-file pks.p12 warden.vps.com "*.wrden.vps.com" localhost 127.0.0.1


sudo a2enmod headers
sudo a2enmod ssl
sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_balancer
sudo a2enmod lbmethod_byrequests

sudo systemctl restart apache2

<VirtualHost *:80>
 ProxyPreserveHost On

 ProxyPass / http://127.0.0.1:8080/
 ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>

sudo nano /etc/apache2/sites-enabled/000-default.conf

<VirtualHost *:443>
    
    SSLEngine on
    SSLCertificateFile /etc/ssl/domain.crt
    SSLCertificateKeyFile /etc/ssl/domain.key
    SSLCACertificateFile /etc/ssl/rootCA.crt
    
    ProxyPreserveHost On
    ProxyPass / http://localhost:8005/
    ProxyPassReverse / http://localhost:8005/
</VirtualHost>

/usr/local/share/ca-certificates/
sudo update-ca-certificates
sudo update-ca-trust


sudo apt-get install libnss3-tools
sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /home/mikl/ssl/localhost.key -out /home/mikl/ssl/localhost.crt -config /home/mikl/ssl/openssl.cnf
mkdir -p $HOME/.pki/nssdb
certutil -d sql:$HOME/.pki/nssdb -A -t "P,," -n localhost.crt -i /home/mikl/ssl/localhost.crt



mkdir -p ~/nginx_proxy/ssl && cd ~/nginx_proxy/ssl
openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr
openssl x509 -signkey domain.key -in domain.csr -req -days 365 -out domain.crt
or one command:
openssl req -newkey rsa:2048 -nodes -keyout domain.key -x509 -days 365 -out domain.crt

For Android:
openssl x509 -in domain.crt -inform PEM -outform DER -out ca-cert.crt
openssl pkcs12 -export -out private.p12 -inkey domain.key -in domain.crt -certfile site.ca-bundle
openssl pkcs12 -export -out private.pfx -inkey domain.key -in domain.crt -certfile site.ca-bundle

sudo nano /etc/nginx/conf.d/proxy_ssl.conf

server {
  listen 8443;
  ssl on;
  ssl_certificate /home/mikl/nginx_proxy/ssl/domain.crt;
  ssl_certificate_key /home/mikl/nginx_proxy/ssl/domain.key;
  ssl_dhparam /etc/ssl/dhparam.pem;
  location / {
     proxy_pass http://192.168.0.120:8005;
  }
}

sudo systemctl restart nginx


docker run -d --name nginx -p 80:80 -v /path/to/nginx/config/default.conf:/etc/nginx/conf.d/default.conf nginx


nano docker-compose.yml
nginx-proxy:


version: '3'

services:
  memcached:
    image: memcached:latest

  nginxgogs:
    image: nginx:latest
    links:
      - memcached:memcached
    container_name: nginx-gogs
    restart: unless-stopped
    ports:
      - "8443:443"
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/
    networks:
      - nginxproxy

networks:
  nginxproxy:
    driver: bridge


sudo docker-compose up -d


